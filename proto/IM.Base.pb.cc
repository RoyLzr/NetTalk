// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Base {

namespace {

const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegisterCmdID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginCmdID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuddyCmdID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SessionCmdID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Util_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IM_2eBase_2eproto() {
  protobuf_AddDesc_IM_2eBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IM.Base.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfo_descriptor_ = file->message_type(0);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_lastlog_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  RegisterCmdID_descriptor_ = file->enum_type(0);
  LoginCmdID_descriptor_ = file->enum_type(1);
  BuddyCmdID_descriptor_ = file->enum_type(2);
  SessionCmdID_descriptor_ = file->enum_type(3);
  ResultType_descriptor_ = file->enum_type(4);
  Util_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IM_2eBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IM_2eBase_2eproto() {
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
}

void protobuf_AddDesc_IM_2eBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rIM.Base.proto\022\007IM.Base\"U\n\010UserInfo\022\017\n\007"
    "user_id\030\001 \001(\r\022\021\n\tuser_name\030\002 \001(\t\022\017\n\007crea"
    "ted\030\003 \001(\r\022\024\n\014user_lastlog\030\004 \001(\r*J\n\rRegis"
    "terCmdID\022\013\n\007NONEREG\020\000\022\025\n\020CID_REGISTER_RE"
    "Q\020\201\010\022\025\n\020CID_REGISTER_RES\020\202\010*\223\001\n\nLoginCmd"
    "ID\022\013\n\007NONELOG\020\000\022\034\n\027CID_LOGIN_REQ_USERLOG"
    "IN\020\201\002\022\034\n\027CID_LOGIN_RES_USERLOGIN\020\202\002\022\035\n\030C"
    "ID_LOGIN_REQ_USERLOGOUT\020\203\002\022\035\n\030CID_LOGIN_"
    "RES_USERLOGOUT\020\204\002*\317\001\n\nBuddyCmdID\022\r\n\tNONE"
    "BUDDY\020\000\022\034\n\027CID_BUDDY_REQ_USER_LIST\020\201\004\022\034\n"
    "\027CID_BUDDY_RES_USER_LIST\020\202\004\022\035\n\030CID_BUDDY"
    "_REQ_BUILD_USER\020\203\004\022\035\n\030CID_BUDDY_RES_BUIL"
    "D_USER\020\204\004\022\033\n\026CID_BUDDY_REQ_DEL_USER\020\205\004\022\033"
    "\n\026CID_BUDDY_RES_DEL_USER\020\206\004*\212\001\n\014SessionC"
    "mdID\022\014\n\010NONESESS\020\000\022\032\n\025CID_SESSION_REQ_BU"
    "ILD\020\201\006\022\032\n\025CID_SESSION_RES_BUILD\020\202\006\022\031\n\024CI"
    "D_SESSION_REQ_STOP\020\203\006\022\031\n\024CID_SESSION_RES"
    "_STOP\020\204\006*\316\001\n\nResultType\022\025\n\021RESULT_LOGIN_"
    "SUCC\020\000\022\025\n\021RESULT_LOGIN_FAIL\020\001\022\025\n\021RESULT_"
    "BUDDY_SUCC\020\002\022\025\n\021RESULT_BUDDY_FAIL\020\003\022\027\n\023R"
    "ESULT_SESSION_SUCC\020\004\022\027\n\023RESULT_SESSION_F"
    "AIL\020\005\022\030\n\024RESULT_REGISTER_SUCC\020\006\022\030\n\024RESUL"
    "T_REGISTER_FAIL\020\007*\033\n\004Util\022\023\n\017UTIL_KEEP_A"
    "LIVE\020\000b\006proto3", 934);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.Base.proto", &protobuf_RegisterTypes);
  UserInfo::default_instance_ = new UserInfo();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBase_2eproto {
  StaticDescriptorInitializer_IM_2eBase_2eproto() {
    protobuf_AddDesc_IM_2eBase_2eproto();
  }
} static_descriptor_initializer_IM_2eBase_2eproto_;
const ::google::protobuf::EnumDescriptor* RegisterCmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterCmdID_descriptor_;
}
bool RegisterCmdID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1025:
    case 1026:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginCmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCmdID_descriptor_;
}
bool LoginCmdID_IsValid(int value) {
  switch(value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuddyCmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyCmdID_descriptor_;
}
bool BuddyCmdID_IsValid(int value) {
  switch(value) {
    case 0:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SessionCmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionCmdID_descriptor_;
}
bool SessionCmdID_IsValid(int value) {
  switch(value) {
    case 0:
    case 769:
    case 770:
    case 771:
    case 772:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultType_descriptor_;
}
bool ResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Util_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Util_descriptor_;
}
bool Util_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kUserNameFieldNumber;
const int UserInfo::kCreatedFieldNumber;
const int UserInfo::kUserLastlogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Base.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Base.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = 0u;
  user_lastlog_ = 0u;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:IM.Base.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBase_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Base.UserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, user_lastlog_);
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Base.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Base.UserInfo.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_created;
        break;
      }

      // optional uint32 created = 3;
      case 3: {
        if (tag == 24) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_lastlog;
        break;
      }

      // optional uint32 user_lastlog = 4;
      case 4: {
        if (tag == 32) {
         parse_user_lastlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_lastlog_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Base.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Base.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Base.UserInfo)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Base.UserInfo.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->created(), output);
  }

  // optional uint32 user_lastlog = 4;
  if (this->user_lastlog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->user_lastlog(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Base.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Base.UserInfo)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string user_name = 2;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Base.UserInfo.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->created(), target);
  }

  // optional uint32 user_lastlog = 4;
  if (this->user_lastlog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->user_lastlog(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.Base.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Base.UserInfo)
  int total_size = 0;

  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // optional string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created());
  }

  // optional uint32 user_lastlog = 4;
  if (this->user_lastlog() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_lastlog());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Base.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Base.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Base.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Base.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  if (from.user_lastlog() != 0) {
    set_user_lastlog(from.user_lastlog());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Base.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Base.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(user_id_, other->user_id_);
  user_name_.Swap(&other->user_name_);
  std::swap(created_, other->created_);
  std::swap(user_lastlog_, other->user_lastlog_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional uint32 user_id = 1;
void UserInfo::clear_user_id() {
  user_id_ = 0u;
}
 ::google::protobuf::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Base.UserInfo.user_id)
  return user_id_;
}
 void UserInfo::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Base.UserInfo.user_id)
}

// optional string user_name = 2;
void UserInfo::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Base.UserInfo.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Base.UserInfo.user_name)
}
 void UserInfo::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Base.UserInfo.user_name)
}
 void UserInfo::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Base.UserInfo.user_name)
}
 ::std::string* UserInfo::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Base.UserInfo.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Base.UserInfo.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Base.UserInfo.user_name)
}

// optional uint32 created = 3;
void UserInfo::clear_created() {
  created_ = 0u;
}
 ::google::protobuf::uint32 UserInfo::created() const {
  // @@protoc_insertion_point(field_get:IM.Base.UserInfo.created)
  return created_;
}
 void UserInfo::set_created(::google::protobuf::uint32 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:IM.Base.UserInfo.created)
}

// optional uint32 user_lastlog = 4;
void UserInfo::clear_user_lastlog() {
  user_lastlog_ = 0u;
}
 ::google::protobuf::uint32 UserInfo::user_lastlog() const {
  // @@protoc_insertion_point(field_get:IM.Base.UserInfo.user_lastlog)
  return user_lastlog_;
}
 void UserInfo::set_user_lastlog(::google::protobuf::uint32 value) {
  
  user_lastlog_ = value;
  // @@protoc_insertion_point(field_set:IM.Base.UserInfo.user_lastlog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Base
}  // namespace IM

// @@protoc_insertion_point(global_scope)
