// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Test.proto

#ifndef PROTOBUF_IM_2eTest_2eproto__INCLUDED
#define PROTOBUF_IM_2eTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "IM.Base.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Test {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_IM_2eTest_2eproto();
void protobuf_AssignDesc_IM_2eTest_2eproto();
void protobuf_ShutdownFile_IM_2eTest_2eproto();

class TestMsg;

// ===================================================================

class TestMsg : public ::google::protobuf::Message {
 public:
  TestMsg();
  virtual ~TestMsg();

  TestMsg(const TestMsg& from);

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMsg& default_instance();

  void Swap(TestMsg* other);

  // implements Message ----------------------------------------------

  inline TestMsg* New() const { return New(NULL); }

  TestMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMsg& from);
  void MergeFrom(const TestMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string buf = 2;
  void clear_buf();
  static const int kBufFieldNumber = 2;
  const ::std::string& buf() const;
  void set_buf(const ::std::string& value);
  void set_buf(const char* value);
  void set_buf(const char* value, size_t size);
  ::std::string* mutable_buf();
  ::std::string* release_buf();
  void set_allocated_buf(::std::string* buf);

  // @@protoc_insertion_point(class_scope:IM.Test.TestMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr buf_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_IM_2eTest_2eproto();
  friend void protobuf_AssignDesc_IM_2eTest_2eproto();
  friend void protobuf_ShutdownFile_IM_2eTest_2eproto();

  void InitAsDefaultInstance();
  static TestMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMsg

// optional uint32 id = 1;
inline void TestMsg::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 TestMsg::id() const {
  // @@protoc_insertion_point(field_get:IM.Test.TestMsg.id)
  return id_;
}
inline void TestMsg::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:IM.Test.TestMsg.id)
}

// optional string buf = 2;
inline void TestMsg::clear_buf() {
  buf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TestMsg::buf() const {
  // @@protoc_insertion_point(field_get:IM.Test.TestMsg.buf)
  return buf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMsg::set_buf(const ::std::string& value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Test.TestMsg.buf)
}
inline void TestMsg::set_buf(const char* value) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Test.TestMsg.buf)
}
inline void TestMsg::set_buf(const char* value, size_t size) {
  
  buf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Test.TestMsg.buf)
}
inline ::std::string* TestMsg::mutable_buf() {
  
  // @@protoc_insertion_point(field_mutable:IM.Test.TestMsg.buf)
  return buf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestMsg::release_buf() {
  // @@protoc_insertion_point(field_release:IM.Test.TestMsg.buf)
  
  return buf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestMsg::set_allocated_buf(::std::string* buf) {
  if (buf != NULL) {
    
  } else {
    
  }
  buf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buf);
  // @@protoc_insertion_point(field_set_allocated:IM.Test.TestMsg.buf)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Test
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eTest_2eproto__INCLUDED
