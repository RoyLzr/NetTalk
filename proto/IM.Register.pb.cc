// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Register.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Register.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Register {

namespace {

const ::google::protobuf::Descriptor* IMRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMRegisterRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMRegisterRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IM_2eRegister_2eproto() {
  protobuf_AddDesc_IM_2eRegister_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IM.Register.proto");
  GOOGLE_CHECK(file != NULL);
  IMRegisterReq_descriptor_ = file->message_type(0);
  static const int IMRegisterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterReq, created_),
  };
  IMRegisterReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMRegisterReq_descriptor_,
      IMRegisterReq::default_instance_,
      IMRegisterReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMRegisterReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterReq, _is_default_instance_));
  IMRegisterRes_descriptor_ = file->message_type(1);
  static const int IMRegisterRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterRes, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterRes, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterRes, created_),
  };
  IMRegisterRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMRegisterRes_descriptor_,
      IMRegisterRes::default_instance_,
      IMRegisterRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMRegisterRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterRes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMRegisterRes, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IM_2eRegister_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMRegisterReq_descriptor_, &IMRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMRegisterRes_descriptor_, &IMRegisterRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IM_2eRegister_2eproto() {
  delete IMRegisterReq::default_instance_;
  delete IMRegisterReq_reflection_;
  delete IMRegisterRes::default_instance_;
  delete IMRegisterRes_reflection_;
}

void protobuf_AddDesc_IM_2eRegister_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::Base::protobuf_AddDesc_IM_2eBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021IM.Register.proto\022\013IM.Register\032\rIM.Bas"
    "e.proto\"@\n\rIMRegisterReq\022\014\n\004name\030\001 \001(\t\022\020"
    "\n\010password\030\002 \001(\t\022\017\n\007created\030\003 \001(\r\"U\n\rIMR"
    "egisterRes\022#\n\006status\030\001 \001(\0162\023.IM.Base.Res"
    "ultType\022\016\n\006reason\030\002 \001(\t\022\017\n\007created\030\003 \001(\r"
    "b\006proto3", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.Register.proto", &protobuf_RegisterTypes);
  IMRegisterReq::default_instance_ = new IMRegisterReq();
  IMRegisterRes::default_instance_ = new IMRegisterRes();
  IMRegisterReq::default_instance_->InitAsDefaultInstance();
  IMRegisterRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eRegister_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eRegister_2eproto {
  StaticDescriptorInitializer_IM_2eRegister_2eproto() {
    protobuf_AddDesc_IM_2eRegister_2eproto();
  }
} static_descriptor_initializer_IM_2eRegister_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRegisterReq::kNameFieldNumber;
const int IMRegisterReq::kPasswordFieldNumber;
const int IMRegisterReq::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRegisterReq::IMRegisterReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Register.IMRegisterReq)
}

void IMRegisterReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMRegisterReq::IMRegisterReq(const IMRegisterReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Register.IMRegisterReq)
}

void IMRegisterReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = 0u;
}

IMRegisterReq::~IMRegisterReq() {
  // @@protoc_insertion_point(destructor:IM.Register.IMRegisterReq)
  SharedDtor();
}

void IMRegisterReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IMRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMRegisterReq_descriptor_;
}

const IMRegisterReq& IMRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRegister_2eproto();
  return *default_instance_;
}

IMRegisterReq* IMRegisterReq::default_instance_ = NULL;

IMRegisterReq* IMRegisterReq::New(::google::protobuf::Arena* arena) const {
  IMRegisterReq* n = new IMRegisterReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRegisterReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Register.IMRegisterReq)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = 0u;
}

bool IMRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Register.IMRegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Register.IMRegisterReq.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Register.IMRegisterReq.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_created;
        break;
      }

      // optional uint32 created = 3;
      case 3: {
        if (tag == 24) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Register.IMRegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Register.IMRegisterReq)
  return false;
#undef DO_
}

void IMRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Register.IMRegisterReq)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->created(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Register.IMRegisterReq)
}

::google::protobuf::uint8* IMRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Register.IMRegisterReq)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->created(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.Register.IMRegisterReq)
  return target;
}

int IMRegisterReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Register.IMRegisterReq)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Register.IMRegisterReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IMRegisterReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMRegisterReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Register.IMRegisterReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Register.IMRegisterReq)
    MergeFrom(*source);
  }
}

void IMRegisterReq::MergeFrom(const IMRegisterReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Register.IMRegisterReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
}

void IMRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Register.IMRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMRegisterReq::CopyFrom(const IMRegisterReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Register.IMRegisterReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRegisterReq::IsInitialized() const {

  return true;
}

void IMRegisterReq::Swap(IMRegisterReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRegisterReq::InternalSwap(IMRegisterReq* other) {
  name_.Swap(&other->name_);
  password_.Swap(&other->password_);
  std::swap(created_, other->created_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMRegisterReq_descriptor_;
  metadata.reflection = IMRegisterReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRegisterReq

// optional string name = 1;
void IMRegisterReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMRegisterReq::name() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterReq.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterReq.name)
}
 void IMRegisterReq::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.IMRegisterReq.name)
}
 void IMRegisterReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.IMRegisterReq.name)
}
 ::std::string* IMRegisterReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Register.IMRegisterReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMRegisterReq::release_name() {
  // @@protoc_insertion_point(field_release:IM.Register.IMRegisterReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.IMRegisterReq.name)
}

// optional string password = 2;
void IMRegisterReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterReq.password)
}
 void IMRegisterReq::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.IMRegisterReq.password)
}
 void IMRegisterReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.IMRegisterReq.password)
}
 ::std::string* IMRegisterReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:IM.Register.IMRegisterReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Register.IMRegisterReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.IMRegisterReq.password)
}

// optional uint32 created = 3;
void IMRegisterReq::clear_created() {
  created_ = 0u;
}
 ::google::protobuf::uint32 IMRegisterReq::created() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterReq.created)
  return created_;
}
 void IMRegisterReq::set_created(::google::protobuf::uint32 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterReq.created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRegisterRes::kStatusFieldNumber;
const int IMRegisterRes::kReasonFieldNumber;
const int IMRegisterRes::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRegisterRes::IMRegisterRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Register.IMRegisterRes)
}

void IMRegisterRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMRegisterRes::IMRegisterRes(const IMRegisterRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Register.IMRegisterRes)
}

void IMRegisterRes::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = 0u;
}

IMRegisterRes::~IMRegisterRes() {
  // @@protoc_insertion_point(destructor:IM.Register.IMRegisterRes)
  SharedDtor();
}

void IMRegisterRes::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IMRegisterRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMRegisterRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMRegisterRes_descriptor_;
}

const IMRegisterRes& IMRegisterRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eRegister_2eproto();
  return *default_instance_;
}

IMRegisterRes* IMRegisterRes::default_instance_ = NULL;

IMRegisterRes* IMRegisterRes::New(::google::protobuf::Arena* arena) const {
  IMRegisterRes* n = new IMRegisterRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRegisterRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Register.IMRegisterRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMRegisterRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMRegisterRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, created_);
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool IMRegisterRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Register.IMRegisterRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IM.Base.ResultType status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::IM::Base::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Register.IMRegisterRes.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_created;
        break;
      }

      // optional uint32 created = 3;
      case 3: {
        if (tag == 24) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Register.IMRegisterRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Register.IMRegisterRes)
  return false;
#undef DO_
}

void IMRegisterRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Register.IMRegisterRes)
  // optional .IM.Base.ResultType status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterRes.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->created(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Register.IMRegisterRes)
}

::google::protobuf::uint8* IMRegisterRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Register.IMRegisterRes)
  // optional .IM.Base.ResultType status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Register.IMRegisterRes.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->created(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.Register.IMRegisterRes)
  return target;
}

int IMRegisterRes::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Register.IMRegisterRes)
  int total_size = 0;

  // optional .IM.Base.ResultType status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional uint32 created = 3;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRegisterRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Register.IMRegisterRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IMRegisterRes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMRegisterRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Register.IMRegisterRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Register.IMRegisterRes)
    MergeFrom(*source);
  }
}

void IMRegisterRes::MergeFrom(const IMRegisterRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Register.IMRegisterRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
}

void IMRegisterRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Register.IMRegisterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMRegisterRes::CopyFrom(const IMRegisterRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Register.IMRegisterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRegisterRes::IsInitialized() const {

  return true;
}

void IMRegisterRes::Swap(IMRegisterRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRegisterRes::InternalSwap(IMRegisterRes* other) {
  std::swap(status_, other->status_);
  reason_.Swap(&other->reason_);
  std::swap(created_, other->created_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMRegisterRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMRegisterRes_descriptor_;
  metadata.reflection = IMRegisterRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMRegisterRes

// optional .IM.Base.ResultType status = 1;
void IMRegisterRes::clear_status() {
  status_ = 0;
}
 ::IM::Base::ResultType IMRegisterRes::status() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterRes.status)
  return static_cast< ::IM::Base::ResultType >(status_);
}
 void IMRegisterRes::set_status(::IM::Base::ResultType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterRes.status)
}

// optional string reason = 2;
void IMRegisterRes::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& IMRegisterRes::reason() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterRes.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterRes::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterRes.reason)
}
 void IMRegisterRes::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Register.IMRegisterRes.reason)
}
 void IMRegisterRes::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Register.IMRegisterRes.reason)
}
 ::std::string* IMRegisterRes::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:IM.Register.IMRegisterRes.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IMRegisterRes::release_reason() {
  // @@protoc_insertion_point(field_release:IM.Register.IMRegisterRes.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IMRegisterRes::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:IM.Register.IMRegisterRes.reason)
}

// optional uint32 created = 3;
void IMRegisterRes::clear_created() {
  created_ = 0u;
}
 ::google::protobuf::uint32 IMRegisterRes::created() const {
  // @@protoc_insertion_point(field_get:IM.Register.IMRegisterRes.created)
  return created_;
}
 void IMRegisterRes::set_created(::google::protobuf::uint32 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:IM.Register.IMRegisterRes.created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Register
}  // namespace IM

// @@protoc_insertion_point(global_scope)
